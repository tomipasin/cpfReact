{"version":3,"sources":["components/Gerar.js","components/Validar.js","App.js","reportWebVitals.js","index.js"],"names":["Gerar","d1","Number","Math","floor","random","d2","d3","d4","d5","d6","d7","d8","d9","d10","d11","d10p","d11p","cpf","console","log","setState","state","Button","outline","color","onClick","this","Badge","Component","Validar","props","AtualizaDados","e","input","target","value","Valida","replace","d1S","slice","d2S","d3S","parseInt","d4S","d5S","d6S","d7S","d8S","d9S","d10S","d11S","soma","resto1","ver1","soma2","resto2","ver2","Altera","v","valid","Result","Alert","InputGroup","Input","name","type","onChange","InputGroupAddon","addonType","App","Jumbotron","fluid","className","Container","Row","Col","sm","Card","body","CardTitle","tag","CardText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0cafacb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Badge, Button } from 'reactstrap';\n\nclass Gerar extends Component {\n    constructor() {\n        super()\n        this.state = {\n            cpf: ''\n        }\n    }\n\n    Gerar = () => {\n        //crio uma var pra cada dígito entre 0 e 9 e defino como Number\n        const d1 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d2 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d3 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d4 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d5 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d6 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d7 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d8 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        const d9 = Number(Math.floor((Math.random() * (9 - 0) + 0)));\n        //os dígitos 10 e 11 são os verificadores. Crio o 1º deles e depois o 2º\n        let d10 = ((d1 * 10 + d2 * 9 + d3 * 8 + d4 * 7 + d5 * 6 + d6 * 5 + d7 * 4 + d8 * 3 + d9 * 2) * 10) % 11;;\n        let d11 = ((d1 * 11 + d2 * 10 + d3 * 9 + d4 * 8 + d5 * 7 + d6 * 6 + d7 * 5 + d8 * 4 + d9 * 3 + d10 * 2) * 10) % 11;\n        //coloco uma condicional para  caso o resto seja 10 o \n        //valor atribuído será para 0\n        const d10p = ((d1 * 10 + d2 * 9 + d3 * 8 + d4 * 7 + d5 * 6 + d6 * 5 + d7 * 4 + d8 * 3 + d9 * 2) * 10) % 11;\n        if (d10p >= 10) {\n            d10 = 0;\n        } else {\n            d10 = d10p;\n        };\n        const d11p = ((d1 * 11 + d2 * 10 + d3 * 9 + d4 * 8 + d5 * 7 + d6 * 6 + d7 * 5 + d8 * 4 + d9 * 3 + d10 * 2) * 10) % 11;\n        if (d11p >= 10) {\n            d11 = 0;\n        } else {\n            d11 = d11p;\n        };\n        //e aqui crio uma const para o CPF gerado. Isiro texto e pontos. Não tem\n        //problema pois vou \"filtrar\" o que quero disso com uma regEx em seguida.\n        const cpf = `${d1}${d2}${d3}.${d4}${d5}${d6}.${d7}${d8}${d9}-${d10}${d11}`;\n        console.log(cpf);\n\n        this.setState({ cpf: cpf })\n\n\n    }\n\n\n\n\n\n\n    render() {\n        return (\n            <div>\n\n\n                <Button outline color=\"info\" onClick={this.Gerar}>Gerar</Button>\n                <br/><br/>\n\n                <h2><Badge color=\"success\">{this.state.cpf}</Badge></h2>\n\n\n            </div>\n\n        )\n    }\n}\n\n\n\nexport default Gerar;\n","import React, { Component } from 'react';\nimport { Button, InputGroup, InputGroupAddon, Input, Alert } from 'reactstrap';\n\nclass Validar extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            input: '',\n            valid: 'N'\n        }\n    }\n\n    AtualizaDados = (e) => {\n        this.setState({ input: e.target.value })\n\n    };\n\n\n    Valida = () => {\n        //buscar o cpf informado que está em state.input\n        let cpfBruto = this.state.input\n        //formatar o número tirando o que não for número.\n        let cpf = cpfBruto.replace(/\\D+/g, '')\n        console.log(cpf)\n\n        //1º conjunto de 3 dígitos\n        const d1S = cpf.slice(0, 1);\n        const d2S = cpf.slice(1, 2);\n        const d3S = cpf.slice(2, 3);\n\n        const d1 = parseInt(d1S);\n        const d2 = parseInt(d2S);\n        const d3 = parseInt(d3S);\n\n        //2º conjunto de 3 dígitos\n        const d4S = cpf.slice(3, 4);\n        const d5S = cpf.slice(4, 5);\n        const d6S = cpf.slice(5, 6);\n\n        const d4 = parseInt(d4S);\n        const d5 = parseInt(d5S);\n        const d6 = parseInt(d6S);\n\n        //3º conjunto de 3 dígitos\n        const d7S = cpf.slice(6, 7);\n        const d8S = cpf.slice(7, 8);\n        const d9S = cpf.slice(8, 9);\n\n        const d7 = parseInt(d7S);\n        const d8 = parseInt(d8S);\n        const d9 = parseInt(d9S);\n\n        //verificadores\n        const d10S = cpf.slice(9, 10);\n        const d11S = cpf.slice(10, 11);\n\n        const d10 = parseInt(d10S);\n        const d11 = parseInt(d11S);\n\n\n        //Aqui exibo no console o CPF separado em dígitos.\n        console.log(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11)\n\n        const soma = (d1 * 10) + (d2 * 9) + (d3 * 8) + (d4 * 7) + (d5 * 6) + (d6 * 5) + (d7 * 4) + (d8 * 3) + (d9 * 2);\n        //disso resulta um número\n        console.log(`Soma 1º fase: ${soma}`);\n\n        //aqui verifico o resultado da soma vezes 10 dividido por 11. preciso do resto dessa divisão. \n        const resto1 = ((soma * 10) % 11);\n        //o resto, caso esteja entre 1 e 9 será o meu dígito verificador.\n        let ver1 = resto1;\n\n\n        if (resto1 !== 10) {\n            //atribui a ver1 o valor do próprio resto. Um número entre 1 e 9.\n            ver1 = resto1;\n            console.log(`1º dígito verificador INFORMADO: ${d10} / CALCULADO: ${ver1}`)\n\n        } else {\n            //atribuo a ver1 o valor de 0.\n            ver1 = 0;\n            console.log(`1º dígito verificador INFORMADO: ${d10} / CALCULADO: ${ver1}`)\n\n        };\n\n\n        //aqui faço a 2º fase de somas e multiplicações dos dígitos, agora incluindo o ver1 na conta.\n        const soma2 = (d1 * 11) + (d2 * 10) + (d3 * 9) + (d4 * 8) + (d5 * 7) + (d6 * 6) + (d7 * 5) + (d8 * 4) + (d9 * 3) + (ver1 * 2);\n        //disso resulta um número.\n        console.log(`Soma 2º fase: ${soma2}`);\n\n        //armazeno aqui o resto da conta de soma2 * 10 % 11. \n        const resto2 = ((soma2 * 10) % 11);\n        //atribuo a var2 o resto2\n        let ver2 = resto2;\n        //e mostro...\n        console.log(`Resto2: ${resto2}`);\n\n\n        if (resto2 !== 10) {\n            ver2 = resto2;\n            console.log(`2º dígito verificador INFORMADO: ${d11} / CALCULADO: ${ver2}`)\n\n        } else {\n            ver2 = 0;\n            console.log(`2º dígito verificador INFORMADO: ${d11} / CALCULADO: ${ver2}`)\n\n        };\n\n        if (d10 === ver1 && d11 === ver2) {\n            //se for é cpf válido\n            console.log('Válido')\n            const valid = true;\n            this.Altera(valid)\n\n\n\n        } else {\n            console.log('inválido')\n            const valid = false;\n            this.Altera(valid)\n\n        }\n\n        // this.Result(this.state.valid)\n        // console.log('aqui')\n    };\n\n    Altera = (v) => {\n        console.log(v)\n        this.setState({ valid: v })\n        console.log(this.state.valid)\n\n    }\n\n\n    Result = (v) => {\n        if (v === true) {\n            return ( <Alert color=\"success\">Válido! </Alert>)\n\n        } \n            if (v === '' || v === false) {\n                return ( <Alert color=\"danger\">Inválido! </Alert>)\n}\n\n        \n    }\n\n\n    render() {\n        return (\n            <div>\n                <InputGroup>\n                    <Input name=\"cpfInput\" type=\"text\" onChange={this.AtualizaDados} />\n                    <InputGroupAddon addonType=\"prepend\"><Button outline color=\"secondary\" onClick={this.Valida} >Validar</Button></InputGroupAddon>\n                </InputGroup>\n                <br/>\n                <h3>{this.Result(this.state.valid)}</h3>\n\n            </div>\n        );\n    }\n}\n\n\nexport default Validar;","import Gerar from './components/Gerar'\nimport Validar from './components/Validar'\nimport './App.css'\nimport { Card, CardTitle, CardText, Row, Col, Jumbotron, Container } from 'reactstrap';\n\n\nfunction App() {\n  return (\n    <div>\n\n\n      <Jumbotron fluid className=\"jumbo\">\n        <Container fluid>\n          <h3 className=\"display-3\">Gerador e validador de CPF</h3>\n          <p className=\"lead\">usando o framework React JS.</p>\n        </Container>\n      </Jumbotron>\n\n\n      <Row>\n        <Col sm='1'></Col>\n        <Col sm=\"5\">\n          <Card body className='gerador shadow p-3 mb-5 bg-white rounded'>\n            <CardTitle tag=\"h3\">Gerador</CardTitle>\n            <CardText>Clique no botão para gerar um número de CPF válido.</CardText>\n            <Gerar />\n          </Card>\n        </Col>\n\n\n        <Col sm=\"5\">\n          <Card body className='gerador shadow p-3 mb-5 bg-white rounded'>\n            <CardTitle tag=\"h3\">Validador</CardTitle>\n            <CardText>Insira um CPF e clique no botão para o validar.</CardText>\n            <Validar />\n          </Card>\n        </Col>\n        <Col sm='1'></Col>\n      </Row>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}